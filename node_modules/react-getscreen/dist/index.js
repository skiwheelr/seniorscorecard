"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var _ = require("lodash");
exports.defaultOptions = {
    mobileLimit: 468,
    tabletLimit: 768,
    shouldListenOnResize: true
};
var ScreenType;
(function (ScreenType) {
    ScreenType[ScreenType["MOBILE"] = 0] = "MOBILE";
    ScreenType[ScreenType["TABLET"] = 1] = "TABLET";
    ScreenType[ScreenType["DESKTOP"] = 2] = "DESKTOP";
})(ScreenType = exports.ScreenType || (exports.ScreenType = {}));
function withGetScreen(WrappedComp, options) {
    if (options === void 0) { options = exports.defaultOptions; }
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super.call(this) || this;
            _this.onResize = function () {
                var newSize = _this.getSize(window.innerWidth);
                if (newSize !== _this.state.currentSize) {
                    _this.setState({
                        currentSize: newSize
                    });
                }
            };
            _this.isMobile = function () {
                return _this.state.currentSize === ScreenType.MOBILE;
            };
            _this.isTablet = function () {
                return _this.state.currentSize === ScreenType.TABLET;
            };
            _this.isDesktop = function () {
                return _this.state.currentSize === ScreenType.DESKTOP;
            };
            _this.onResize = _.throttle(_this.onResize, 100);
            _this.state = {
                currentSize: _this.getSize(window.innerWidth)
            };
            return _this;
        }
        class_1.prototype.componentDidMount = function () {
            if (options.shouldListenOnResize) {
                window.addEventListener('resize', this.onResize);
            }
        };
        class_1.prototype.componentWillUnmount = function () {
            this.onResize.cancel();
            window.removeEventListener('resize', this.onResize);
        };
        class_1.prototype.getSize = function (size) {
            if (size <= options.mobileLimit) {
                return ScreenType.MOBILE;
            }
            else if (size >= options.tabletLimit) {
                return ScreenType.DESKTOP;
            }
            else {
                return ScreenType.TABLET;
            }
        };
        class_1.prototype.render = function () {
            var detectMethods = {
                isMobile: this.isMobile,
                isTablet: this.isTablet,
                isDesktop: this.isDesktop
            };
            return React.createElement(WrappedComp, __assign({}, detectMethods, this.props));
        };
        return class_1;
    }(React.Component));
}
exports.withGetScreen = withGetScreen;
